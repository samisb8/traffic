echo "üß™ Tests MLOps Traffic Flow"
echo "==========================="

# Tests unitaires
echo "1Ô∏è‚É£ Tests unitaires..."
python -c "
import sys
sys.path.append('.')

# Test imports
try:
    import backend.main
    import streamlit_app.app
    from backend.predictor import TrafficPredictor
    from backend.monitor import ModelMonitor
    print('‚úÖ Imports OK')
except Exception as e:
    print(f'‚ùå Import error: {e}')
    exit(1)

# Test predictor
try:
    predictor = TrafficPredictor()
    assert predictor.is_loaded(), 'Model not loaded'
    print('‚úÖ Predictor OK')
except Exception as e:
    print(f'‚ùå Predictor error: {e}')
    exit(1)

# Test monitor
try:
    monitor = ModelMonitor()
    metrics = monitor.get_current_metrics()
    assert 'model_metrics' in metrics, 'Missing model metrics'
    print('‚úÖ Monitor OK')
except Exception as e:
    print(f'‚ùå Monitor error: {e}')
    exit(1)
"

# Tests MLOps
echo "2Ô∏è‚É£ Tests MLOps..."
python mlops/train.py --test-mode
if [ $? -eq 0 ]; then
    echo "‚úÖ Training OK"
else
    echo "‚ùå Training failed"
    exit 1
fi

# Tests API (si running)
echo "3Ô∏è‚É£ Tests API..."
if curl -f http://localhost:8000/health > /dev/null 2>&1; then
    echo "‚úÖ API Health OK"
    
    # Test endpoints
    curl -f http://localhost:8000/predict > /dev/null 2>&1 && echo "‚úÖ Predict endpoint OK" || echo "‚ö†Ô∏è  Predict endpoint issue"
    curl -f http://localhost:8000/metrics > /dev/null 2>&1 && echo "‚úÖ Metrics endpoint OK" || echo "‚ö†Ô∏è  Metrics endpoint issue"
else
    echo "‚ö†Ô∏è  API non accessible (normal si pas d√©marr√©e)"
fi

echo ""
echo "‚úÖ Tests termin√©s!"