import json
import shutil
from pathlib import Path
import requests

def load_metrics(model_path):
    """Charge les m√©triques d'un mod√®le"""
    metrics_path = model_path.parent / "model_metrics.json"
    if metrics_path.exists():
        with open(metrics_path) as f:
            return json.load(f)
    return None

def compare_models():
    """Compare nouveau mod√®le vs mod√®le en production"""
    
    # Nouveau mod√®le
    new_model_path = Path("data/model.pkl")
    new_metrics = load_metrics(new_model_path)
    
    # Mod√®le en production
    prod_model_path = Path("data/model_production.pkl")
    prod_metrics_path = Path("data/model_production_metrics.json")
    
    if not prod_model_path.exists():
        print("üÜï Aucun mod√®le en production, d√©ploiement du nouveau")
        return True, new_metrics, None
    
    if prod_metrics_path.exists():
        with open(prod_metrics_path) as f:
            prod_metrics = json.load(f)
    else:
        print("‚ö†Ô∏è  M√©triques production manquantes")
        return True, new_metrics, None
    
    # Comparaison (crit√®re: accuracy)
    new_accuracy = new_metrics.get('accuracy', 0)
    prod_accuracy = prod_metrics.get('accuracy', 0)
    
    print(f"üìä Comparaison mod√®les:")
    print(f"   Nouveau: {new_accuracy:.4f}")
    print(f"   Production: {prod_accuracy:.4f}")
    
    should_deploy = new_accuracy > prod_accuracy
    return should_deploy, new_metrics, prod_metrics

def deploy_model():
    """D√©ploie le nouveau mod√®le si meilleur"""
    print("üöÄ D√©but d√©ploiement mod√®le...")
    
    # V√©rification nouveau mod√®le
    new_model_path = Path("data/model.pkl")
    if not new_model_path.exists():
        print("‚ùå Aucun nouveau mod√®le trouv√©")
        return False
    
    # Comparaison
    should_deploy, new_metrics, prod_metrics = compare_models()
    
    if not should_deploy:
        print("‚ùå Nouveau mod√®le moins performant, d√©ploiement annul√©")
        return False
    
    # Backup mod√®le actuel
    prod_model_path = Path("data/model_production.pkl")
    if prod_model_path.exists():
        backup_path = Path("data/model_backup.pkl")
        shutil.copy2(prod_model_path, backup_path)
        print(f"üíæ Backup cr√©√©: {backup_path}")
    
    # D√©ploiement
    try:
        # Copie nouveau mod√®le ‚Üí production
        shutil.copy2(new_model_path, prod_model_path)
        
        # Copie m√©triques
        shutil.copy2("data/model_metrics.json", "data/model_production_metrics.json")
        
        print("‚úÖ Mod√®le d√©ploy√© en production!")
        
        # Notification API (optionnel)
        try:
            response = requests.post("http://localhost:8000/model-updated")
            print("üîÑ API notifi√©e du nouveau mod√®le")
        except:
            print("‚ö†Ô∏è  Impossible de notifier l'API")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur d√©ploiement: {e}")
        return False

if __name__ == "__main__":
    success = deploy_model()
    if success:
        print("üéâ D√©ploiement r√©ussi!")
    else:
        print("üí• D√©ploiement √©chou√©!")